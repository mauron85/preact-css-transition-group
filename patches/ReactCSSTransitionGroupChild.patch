--- src-react/ReactCSSTransitionGroupChild.js	2017-03-22 16:58:47.000000000 +0100
+++ src/ReactCSSTransitionGroupChild.js	2017-03-22 21:53:19.000000000 +0100
@@ -11,50 +11,52 @@
 
 'use strict';
 
-var React = require('React');
-var ReactAddonsDOMDependencies = require('ReactAddonsDOMDependencies');
+import { Component, cloneElement } from 'preact';
+import { onlyChild, getComponentBase } from './utils';
 
-var CSSCore = require('CSSCore');
-var ReactTransitionEvents = require('ReactTransitionEvents');
-
-var onlyChild = require('onlyChild');
+import CSSCore from 'fbjs/lib/CSSCore';
+import ReactTransitionEvents from './ReactTransitionEvents';
 
 var TICK = 17;
 
-var ReactCSSTransitionGroupChild = React.createClass({
-  displayName: 'ReactCSSTransitionGroupChild',
+class ReactCSSTransitionGroupChild extends Component {
+  static displayName = 'ReactCSSTransitionGroupChild';
 
-  propTypes: {
-    name: React.PropTypes.oneOfType([
-      React.PropTypes.string,
-      React.PropTypes.shape({
-        enter: React.PropTypes.string,
-        leave: React.PropTypes.string,
-        active: React.PropTypes.string,
-      }),
-      React.PropTypes.shape({
-        enter: React.PropTypes.string,
-        enterActive: React.PropTypes.string,
-        leave: React.PropTypes.string,
-        leaveActive: React.PropTypes.string,
-        appear: React.PropTypes.string,
-        appearActive: React.PropTypes.string,
-      }),
-    ]).isRequired,
-
-    // Once we require timeouts to be specified, we can remove the
-    // boolean flags (appear etc.) and just accept a number
-    // or a bool for the timeout flags (appearTimeout etc.)
-    appear: React.PropTypes.bool,
-    enter: React.PropTypes.bool,
-    leave: React.PropTypes.bool,
-    appearTimeout: React.PropTypes.number,
-    enterTimeout: React.PropTypes.number,
-    leaveTimeout: React.PropTypes.number,
-  },
+  // static propTypes = {
+  //   name: React.PropTypes.oneOfType([
+  //     React.PropTypes.string,
+  //     React.PropTypes.shape({
+  //       enter: React.PropTypes.string,
+  //       leave: React.PropTypes.string,
+  //       active: React.PropTypes.string,
+  //     }),
+  //     React.PropTypes.shape({
+  //       enter: React.PropTypes.string,
+  //       enterActive: React.PropTypes.string,
+  //       leave: React.PropTypes.string,
+  //       leaveActive: React.PropTypes.string,
+  //       appear: React.PropTypes.string,
+  //       appearActive: React.PropTypes.string,
+  //     }),
+  //   ]).isRequired,
+  //
+  //   // Once we require timeouts to be specified, we can remove the
+  //   // boolean flags (appear etc.) and just accept a number
+  //   // or a bool for the timeout flags (appearTimeout etc.)
+  //   appear: React.PropTypes.bool,
+  //   enter: React.PropTypes.bool,
+  //   leave: React.PropTypes.bool,
+  //   appearTimeout: React.PropTypes.number,
+  //   enterTimeout: React.PropTypes.number,
+  //   leaveTimeout: React.PropTypes.number,
+  // };
+  constructor(props) {
+    super(props);
+		this.flushClassNameAndNodeQueue = this.flushClassNameAndNodeQueue.bind(this);
+	}
 
-  transition: function(animationType, finishCallback, userSpecifiedDelay) {
-    var node = ReactAddonsDOMDependencies.getReactDOM().findDOMNode(this);
+  transition(animationType, finishCallback, userSpecifiedDelay) {
+    let node = getComponentBase(this);
 
     if (!node) {
       if (finishCallback) {
@@ -100,9 +102,9 @@
       // DEPRECATED: this listener will be removed in a future version of react
       ReactTransitionEvents.addEndEventListener(node, endListener);
     }
-  },
+  }
 
-  queueClassAndNode: function(className, node) {
+  queueClassAndNode(className, node) {
     this.classNameAndNodeQueue.push({
       className: className,
       node: node,
@@ -111,24 +113,24 @@
     if (!this.timeout) {
       this.timeout = setTimeout(this.flushClassNameAndNodeQueue, TICK);
     }
-  },
+  }
 
-  flushClassNameAndNodeQueue: function() {
-    if (this.isMounted()) {
+  flushClassNameAndNodeQueue() {
+    if (getComponentBase(this)) {
       this.classNameAndNodeQueue.forEach(function(obj) {
         CSSCore.addClass(obj.node, obj.className);
       });
     }
     this.classNameAndNodeQueue.length = 0;
     this.timeout = null;
-  },
+  }
 
-  componentWillMount: function() {
+  componentWillMount() {
     this.classNameAndNodeQueue = [];
     this.transitionTimeouts = [];
-  },
+  }
 
-  componentWillUnmount: function() {
+  componentWillUnmount() {
     if (this.timeout) {
       clearTimeout(this.timeout);
     }
@@ -137,35 +139,35 @@
     });
 
     this.classNameAndNodeQueue.length = 0;
-  },
+  }
 
-  componentWillAppear: function(done) {
+  componentWillAppear(done) {
     if (this.props.appear) {
       this.transition('appear', done, this.props.appearTimeout);
     } else {
       done();
     }
-  },
+  }
 
-  componentWillEnter: function(done) {
+  componentWillEnter(done) {
     if (this.props.enter) {
       this.transition('enter', done, this.props.enterTimeout);
     } else {
       done();
     }
-  },
+  }
 
-  componentWillLeave: function(done) {
+  componentWillLeave(done) {
     if (this.props.leave) {
       this.transition('leave', done, this.props.leaveTimeout);
     } else {
       done();
     }
-  },
+  }
 
-  render: function() {
+  render() {
     return onlyChild(this.props.children);
-  },
-});
+  }
+}
 
-module.exports = ReactCSSTransitionGroupChild;
+export default ReactCSSTransitionGroupChild;
